@name EGP Minimap (simfphys)
@persist HUD:wirelink DIM:vector2 HUDOFS:vector2 ARMOR HEALTH MINIMAP LOCALS:array T PLY:array SCALE
@outputs LOCALS:array PLY:array T
# A GTA styled hud.
# Inspired by GTA:SA and GTAV.
# make sure drawing the stock hud itself is off!

# Author: SEARAH

if(first()){
 SCALE = 10
 DIM=egpScrSize(owner())
 HUD=entity():isWeldedTo():wirelink()
 HUD:egpClear() 
 HUD:egpDrawTopLeft(1)
 HUDOFS=vec2(0,-50)
 ARMOR=min(100,owner():armor())
 HEALTH=min(100,owner():health())

 # main hud :
 HUD:egpBox(1,HUDOFS+vec2(20,DIM:y()-180),vec2(200,160))               # Background
  HUD:egpColor(1,vec4(0,0,0,196))   

        HUD:egpBox(2,HUDOFS+vec2(25,DIM:y()-175),vec2(190,130))            # Background main minimap bg
         HUD:egpColor(2,vec4(64,64,64,128))
        
        
        
        HUD:egpBox(3,HUDOFS+vec2(26,DIM:y()-40),vec2(92,15))               # Armor  BG
         HUD:egpColor(3,vec(64,0,0))

        HUD:egpBox(4,HUDOFS+vec2(26+97,DIM:y()-40),vec2(92,15))            # Health BG
         HUD:egpColor(4,vec(0,64,0))

        HUD:egpBox(5,HUDOFS+vec2(28,DIM:y()-38),vec2(88*(ARMOR/100),11))               # Armor  Meter
         HUD:egpColor(5,vec4(255,0,0,128))

        HUD:egpBox(6,HUDOFS+vec2(28+97,DIM:y()-38),vec2(88*(HEALTH/100),11))            # Health Meter
         HUD:egpColor(6,vec4(0,255,0,128))


 function hpMeterUpdate(){                                                          # update health meter
    HUD:egpSize(6,vec2(88*(HEALTH/100),11))

 }
 function armorMeterUpdate(){                                                       # update armor meter
    HUD:egpSize(5,vec2(88*(ARMOR/100),11))

 }

 function array updateMinimap(){                                                          # create a local minimap
    local LOCALPOS=array()
    if(findCanQuery()){
        findInBox(owner():pos()-vec(190,130,150)*SCALE,owner():pos()+vec(190,130,150)*SCALE)
        findClipToClass("player")
        findExcludePlayer(owner())
        PLY = findToArray()
        # if(changed(time())){print("Count "+Ply:count())}
    }
    for(K=1,max(1,PLY:count())){
      LOCALPOS[K,vector2]=vec2(PLY[K,entity]:pos()-owner():pos())/(SCALE*2.125) 
    }


    return LOCALPOS
 }

 function vector2 wirelink:egpCenter(Index){
 return This:egpPos(Index)+This:egpSize(Index)/2
 }
HUD:egpBox(100,vec2(),vec2(20))
HUD:egpPos(100,HUD:egpCenter(2)-vec2(10))
HUD:egpMaterial(100,"icon16/bullet_purple.png")
}


event tick(){
 ARMOR=min(100,owner():armor())
 HEALTH=min(100,owner():health())



    if(egpCanSendUmsg()){
         T++
        if(T>maxPlayers()){T=1}
        hpMeterUpdate()
        armorMeterUpdate() 
        LOCALS=updateMinimap()               

            
            if(HUD:egpHasObject(200+T)){
              HUD:egpPos(200+T,HUD:egpCenter(2)+LOCALS[T,vector2]-vec2(4))
              HUD:egpAlpha(200+T,PLY[T,entity]:isValid()*255)
            }else{
              HUD:egpBox(200+T,vec2(),vec2(8))
              HUD:egpPos(200+T,HUD:egpCenter(2)+LOCALS[T,vector2]-vec2(4))
              HUD:egpAlpha(200+T,PLY[T,entity]:isValid()*255)
              HUD:egpMaterial(200+T,"vgui/slider")
              if(HUD:egpHasObject(200+T)==0){error("CANNOT CREATE EGP HUD ELEMENT")}
            }
            }
}
