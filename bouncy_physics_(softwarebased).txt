@name Bouncy physics (softwarebased)
@persist Ball:entity Size Inertia:vector Pos:vector
@persist HN:vector StartV:vector Drag Elasticity Mass SurfaceType
#include "reflectDir"
if(first()){
    
 Size = 18.4865   
 Elasticity = 95
 Drag = 0.5
 Mass = 4
 StartV = vec(2,2,15)

 runOnTick(1)
 rangerPersist(1)
 #holoCreate(2)
 holoDisableShading(2,1)
 holoAlpha(2,32)
 holoModel(2,"models/sprops/misc/bone_from_x.mdl")

 Ball=holoCreate(1)
 holoPos(1,entity():pos()+vec(0,0,50))
 holoModel(1,"models/hunter/misc/sphere075x075.mdl")
 holoScaleUnits(1,vec(Size))
 holoMaterial(1,"models/debug/debugwhite") #basic color   
 #holoDisableShading(1,1)

 function vector vector:doGravity(){
    return This-vec(0,0,9.81/33) #tickrate dependant
 }

 function vector vector:calculateDrag(){
        local NV=This:normalized()
        local VL=This:length()
        
        return NV*VL*((100-(Drag/Mass))/100)
 }

 function vector vector:calculateDeformation(){
        return This*(Elasticity/100)
 }

 function ranger:doSurfacePhysics(){
        local Type=This:matType()   
        local RBR = 1.00
        switch(Type:lower()){
         case "concrete", RBR = 0.9 break
         case "default", RBR = 1 break
         case "dirt", RBR = 0.2 break
         case "grass", RBR = 0.2 break
         case "metal", RBR = 0.9 break
         case "flesh", RBR = 0.7 break
        }
        Inertia=Inertia*RBR
 }

 function entity:doPredict(){
    local V=Inertia
    local P=This:pos()
    local VA=heading(vec(),ang(180,180,0),V)
    
    local Predict = rangerOffset(P,P+V+vec(Size/2,0,0):rotate(VA)) # predict ahead
    if(Predict:hitWorld()||Predict:hit()){
       Inertia = -Inertia:doReflect(Predict:hitNormal())
       Inertia = Inertia:calculateDeformation()  
       Predict:doSurfacePhysics()
       Ball:soundPlay(1,4,"physics/rubber/rubber_tire_impact_hard"+floor(random(2)+1)+".wav")
       soundVolume(1,min(Inertia:length(),1))
       # reflect using inertia
    } 
    
 }

 function entity:hookMove(){
    This:setPos(This:pos()+Inertia)       
 }

 Inertia=StartV
}
if(perf()){
 Inertia = Inertia:doGravity()
 Inertia = Inertia:calculateDrag()
 Ball:doPredict()
 Ball:hookMove()   
}
