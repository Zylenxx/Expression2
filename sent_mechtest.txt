@name sent_MechTest
@model models/spacecode/sfchip.mdl
@inputs  [W A S D Shift R Space Mouse1 Mouse2]
@persist Body:entity Seat:entity Facing:angle SelfA:angle Self:entity [IA IB]:vector
@persist Deltatimes:array DELTAOUT:array IsFP IsTP HPN ARN HP_ARM:array
@persist HEALTH ARMOR LEGL:vector2 [ARRL ARRR]:array [LeftLeg RightLeg]:array NoMov AIRTIME
@outputs HEALTH ARMOR NoMov TDYPE Deltatimes:array DELTAOUT:array Angle:angle Position:vector Debug:angle InterpN AIRTIME  
#include "IKFuncs"
#include "gyrodir"
#include "HPBar"
if(first()){
 Seat = seatSpawn("",entity():pos()+vec(0,0,50),ang(0,-90,0),1)  #< if you can use seatspawn   
}
if(first()||clk("Respawn")){
    Body:propBreak()
    entity():setAng(ang())
    propSpawnUndo(0)
    rangerPersist(1)
    #cameraCreate(1)
    NoMov=0
    Body = propSpawn("models/hunter/blocks/cube1x150x1.mdl",entity():pos()+vec(0,0,100),ang(),1)
   # Body = entity():isWeldedTo()
    Body:setMass(800)
    Body:setAlpha(0)
    runOnDmg(1,Body)
    Body:trackDamage() #< if you can use damagecore
    HEALTH = 2200
    ARMOR  = 1000
    LEGL   = vec2(100,80)
    HP_ARM = array(HEALTH,ARMOR)
    function entity:servoStart(Index){
       This:soundPlay(Index,999999,"acf_extra/vehiclefx/boost/supercharger.wav")
       soundVolume(Index,0) 
       Deltatimes[Index,angle]=This:angles()
       DELTAOUT[Index,number]=0
    }
    
    HPN=newHPBar(Body)
    ARN=newArmorBar(Body)

    function entity:emitStepSound(){
     local RMIX = floor(random(15,32))
     local SEL = floor(random(1,3)):toString()
     local File = "physics/plaster/drywall_impact_soft"
      This:soundPlay(RMIX,1,File+SEL+".wav")     
    }

    function addHoloParented(PARENT_TO,HoloID,MDL:string,Offset:vector,A_Offset:angle){
        local PTARG = holoEntity(PARENT_TO):pos()
        local PANG  = holoEntity(PARENT_TO):angles()
        holoCreate(HoloID,PTARG+Offset)
        holoAng(HoloID,PANG+A_Offset)
        holoModel(HoloID,MDL)
        holoParent(HoloID,PARENT_TO)
    }
    function addHoloParented(PARENT_TO:entity,HoloID,MDL:string,Offset:vector,A_Offset:angle){
        local PTARG = PARENT_TO:pos()
        local PANG  = PARENT_TO:angles()
        holoCreate(HoloID,PTARG+Offset)
        holoAng(HoloID,PANG+A_Offset)
        holoModel(HoloID,MDL)
        holoParent(HoloID,PARENT_TO)
    }

    function movementMap(){
        Rot = Body:angles()*ang(0,1,0)
        if(NoMov==0){
         
        Body:applyForce(Body:mass()*vec(0,0,Space*800):rotate(Rot))
        }  
        if(NoMov<0.6){
         AIRTIME = 0
         Body:applyForce(Body:mass()*vec((W-S)*15,(A-D)*15,0):rotate(Rot)) 
        }   
        if(NoMov==1){
            AIRTIME++
            Body:applyForce(Body:mass()*vec((W-S)*max(0,15-(AIRTIME*0.01)),(A-D)*max(0,15-(AIRTIME*0.01)),0):rotate(Rot))
        }
    }
    
    
    
    function array entity:getSeatInfo(){
        return array(This:driver(),This:pos(),This:angles(),This:driver():getWeaponColor())
    }
    
   
    function entity:damageF(Damage:damage){
        local DTYPE=Damage:getType()
        local D_B  = Damage:getDamage()
        local D_H  = 0.50*D_B
        local D_A  = 1.00*D_B
        local TypeN="generic"
        switch(DTYPE){ #                direct dmg         armor dmg
            case _DMG_BURN           , D_H = D_B * 0.01   D_A = D_B * 0.04 TypeN="burn"         break
            case _DMG_ACID           , D_H = D_B * 0.20   D_A = D_B * 1.00 TypeN="acid"         break
            case _DMG_FALL           , D_H = D_B * 0.00   D_A = D_B * 0.70 TypeN="fall"         break
            case _DMG_SHOCK          , D_H = D_B * 2.00   D_A = D_B * 0.00 TypeN="shock"        break
            case _DMG_BLAST          , D_H = D_B * 0.50   D_A = D_B * 1.00 TypeN="blast"        break
            case _DMG_BLAST_SURFACE  , D_H = D_B * 0.20   D_A = D_B * 0.30 TypeN="blast surf"   break
            case _DMG_BULLET         , D_H = D_B * 0.20   D_A = D_B * 1.00 TypeN="bullet"       break
            case _DMG_CRUSH          , D_H = D_B * 1.00   D_A = D_B * 1.00 TypeN="crush"        break
        }
        #hint("Damage:"+D_B,1)
        #hint("DMGTYPE "+DTYPE+"=> -HP:"+D_H+"  -AP:"+D_A,1)
        ARMOR=max(0,ARMOR-D_A)
        ARMORED=(ARMOR>0)
        HEALTH=max(0,HEALTH-(D_H*ARMORED)-(D_A*(!ARMORED)))
    }

    function entity:doServoThink(Index){
       Deltatimes[Index,angle] = Deltatimes[Index,angle]*0.9+0.1*This:angles()
       local DSV = toLocalAng(vec(),Deltatimes[Index,angle],vec(),This:angles())
       local S_DSV = abs(DSV:pitch())+abs(DSV:yaw())+abs(DSV:roll())
        if(S_DSV<180){
         DELTAOUT[Index,number]=DELTAOUT[Index,number]*0.9+0.1*S_DSV
        soundPitch(Index,min(255,S_DSV/4))
        soundVolume(Index,min(0.05,S_DSV/180))
        }
    }
    
    function legmovement(){
        NoMov=0
        R1 = rangerOffset(LeftLeg[1,entity]:pos(),LeftLeg[1,entity]:pos()-vec(-12,0,300):rotate(Body:angles())):position()
        R2 = rangerOffset(RightLeg[1,entity]:pos(),RightLeg[1,entity]:pos()-vec(-12,0,300):rotate(Body:angles())):position()
    
        VT= min(1,Body:vel():length())
    
        RT =  vec( 0,0, max(0, abs( sin( curtime()       *180/VT ) )-0.6 ) )*min(70,max(0,(Body:vel()+Body:angVelVector()):length()-2))
        RT2 = vec( 0,0, max(0, abs( sin( (curtime()+0.5) *180/VT ) )-0.6 ) )*min(70,max(0,(Body:vel()+Body:angVelVector()):length()-2))
    
        if(rangerOffset(LeftLeg[3,entity]:pos(),LeftLeg[3,entity]:pos()-vec(0,0,5)):hit()==0){
         IA=IA*0.7+0.3*R1   
        
         NoMov = NoMov+0.5
        }else{ 
        }
        if(rangerOffset(RightLeg[3,entity]:pos(),RightLeg[3,entity]:pos()-vec(0,0,5)):hit()==0){
         IB=IB*0.7+0.3*R2   
         NoMov = NoMov+0.5
        }else{
        }
             
        Interp1=IA
        Interp2=IB
        
        ARRL = LEGL:doIk(Interp1+RT,LeftLeg[1,entity]:pos(),Body:forward())
        ARRR = LEGL:doIk(Interp2+RT2,RightLeg[1,entity]:pos(),Body:forward())
           
            
        holoAng(1,ARRL[1,angle])
        holoAng(2,ARRL[2,angle])
        
        holoAng(4,ARRR[1,angle])
        holoAng(5,ARRR[2,angle])
        
        holoAng(3,Body:forward():toAngle()+ang(-90,0,0))
        holoAng(6,Body:forward():toAngle()+ang(-90,0,0))
        
        holoPos(300,R1)
        holoPos(301,R2)
            
    }
    
    function turnToMovementDir(){
        if(Seat:driver():isValid()==0){
        Forw = (floor(Body:vel()/10)*10):toAngle()
        Forw = (floor(Body:vel()/10)*10):toAngle()
        }else{
        Forw = Seat:driver():eyeAngles()*ang(0,1,0)   
        }
        Y    = toLocalAng(vec(),Body:angles(),vec(),Forw)
        TOF  = ang(0,-Y:yaw(),0)*(Body:vel():length()*Body:mass()/100+50)*4
        Debug = Body:angVel()
        Body:applyAngForce(-Body:angVel()*Body:mass()*0.7+TOF)
        Body:applyForce(-Body:vel()*Body:mass()*1/10*vec(1,1,0))
    }
    
    LeftLeg = LEGL:createPoints(1,Body:pos()+vec(0,40,0))
    RightLeg = LEGL:createPoints(4,Body:pos()+vec(0,-40,0))
        holoMaterial(2,"models/Magnusson_Teleporter/magnusson_teleporter_fxglow1")
        holoMaterial(5,"models/Magnusson_Teleporter/magnusson_teleporter_fxglow1")

    LeftLeg[1,entity]:servoStart(1)
    LeftLeg[2,entity]:servoStart(2)
    RightLeg[1,entity]:servoStart(3)
    RightLeg[2,entity]:servoStart(4)
    
    holoParent(1,Body)
    holoParent(4,Body)
    
    foreach(N,Point:entity=LeftLeg:add(RightLeg)){
        
        if(N!=3&&N!=6){
        holoModel(holoIndex(Point),"models/sprops/geometry/fdisc_12.mdl")
        holoScaleUnits(holoIndex(Point),vec(25))
        }else{
        holoModel(holoIndex(Point),"models/props_lab/tpplug.mdl")
        holoScaleUnits(holoIndex(Point),vec(20,40,40))
        }
    }
    
    LeftLeg[1,entity]:createBone(50,"models/sprops/cuboids/height12/size_1/cube_12x60x12.mdl",15,LeftLeg[2,entity])
    LeftLeg[2,entity]:createBone(51,"models/sprops/cuboids/height12/size_1/cube_12x60x12.mdl",15,LeftLeg[3,entity])
    
    RightLeg[1,entity]:createBone(52,"models/sprops/cuboids/height12/size_1/cube_12x60x12.mdl",15,RightLeg[2,entity])
    RightLeg[2,entity]:createBone(53,"models/sprops/cuboids/height12/size_1/cube_12x60x12.mdl",15,RightLeg[3,entity])

    for(I=50,53){
        holoMaterial(I,"models/Combine_Turrets/combine_cannon")
    }

# plate deco

    addHoloParented(50,54,"models/sprops/rectangles/size_3/rect_24x78x3.mdl",vec(0,13,0),ang(0,0,90))
    holoMaterial(54,"sprops/textures/hex_dark_bump")
    
    addHoloParented(50,55,"models/sprops/rectangles/size_3/rect_24x78x3.mdl",vec(0,-13,0),ang(0,0,90))
    holoMaterial(55,"sprops/textures/hex_dark_bump")
    
    addHoloParented(52,56,"models/sprops/rectangles/size_3/rect_24x78x3.mdl",vec(0,13,0),ang(0,0,90))
    holoMaterial(56,"sprops/textures/hex_dark_bump")
    
    addHoloParented(52,57,"models/sprops/rectangles/size_3/rect_24x78x3.mdl",vec(0,-13,0),ang(0,0,90))
    holoMaterial(57,"sprops/textures/hex_dark_bump")
    
    addHoloParented(51,58,"models/sprops/rectangles/size_3/rect_24x66x3.mdl",vec(0,13,0),ang(0,0,90))
    holoMaterial(58,"sprops/textures/hex_dark_bump")
    
    addHoloParented(51,59,"models/sprops/rectangles/size_3/rect_24x66x3.mdl",vec(0,-13,0),ang(0,0,90))
    holoMaterial(59,"sprops/textures/hex_dark_bump")
    
    addHoloParented(53,60,"models/sprops/rectangles/size_3/rect_24x66x3.mdl",vec(0,13,0),ang(0,0,90))
    holoMaterial(60,"sprops/textures/hex_dark_bump")
    
    addHoloParented(53,61,"models/sprops/rectangles/size_3/rect_24x66x3.mdl",vec(0,-13,0),ang(0,0,90))
    holoMaterial(61,"sprops/textures/hex_dark_bump")
    
# details part 1

    addHoloParented(50,62,"models/sprops/misc/tubes/size_2/q_tube_24x78.mdl",vec(0,0,10),ang(45,-90,0))
      holoScale(62,vec(1.4,1,1.4))
      holoMaterial(62,"phoenix_storms/FuturisticTrackRamp_1-2")
    
    addHoloParented(52,63,"models/sprops/misc/tubes/size_2/q_tube_24x78.mdl",vec(0,0,10),ang(45,90,0))
      holoScale(63,vec(1.4,1,1.4))
      holoMaterial(63,"phoenix_storms/FuturisticTrackRamp_1-2")
    
    addHoloParented(51,64,"models/sprops/misc/tubes/size_2/q_tube_24x66.mdl",vec(0,0,10),ang(45,-90,0))
      holoScale(64,vec(1.4,0.8,1.4))
      holoMaterial(64,"phoenix_storms/FuturisticTrackRamp_1-2")
    
    addHoloParented(53,65,"models/sprops/misc/tubes/size_2/q_tube_24x66.mdl",vec(0,0,10),ang(45,90,0))
      holoScale(65,vec(1.4,0.8,1.4))
      holoMaterial(65,"phoenix_storms/FuturisticTrackRamp_1-2")
    
    addHoloParented(50,66,"models/engines/emotorsmall.mdl",vec(10,0.1,-10),ang(180,0,0))
      holoSkin(66,1)
      holoScale(66,vec(0.8))
    addHoloParented(52,67,"models/engines/emotorsmall.mdl",vec(10,0.1,-10),ang(180,0,0))
      holoSkin(67,1)
      holoScale(67,vec(0.8))

# details part 2
    addHoloParented(1,68,"models/sprops/geometry/fhex_12.mdl",vec(0,5,0),ang(90,0,0))
      holoMaterial(1,"models/props_silo/pipesa_bombsite")
      holoMaterial(68,"models/props_silo/pipesa_bombsite")
      holoScaleUnits(68,vec(40,30,33))

    addHoloParented(4,69,"models/sprops/geometry/fhex_12.mdl",vec(0,-5,0),ang(90,0,0))
      holoMaterial(4,"models/props_silo/pipesa_bombsite")
      holoMaterial(69,"models/props_silo/pipesa_bombsite")
      holoScaleUnits(69,vec(40,30,33))

    addHoloParented(2,70,"models/props_combine/headcrabcannister01a.mdl",vec(0,15,0),ang(0,90,0))
     holoScaleUnits(70,vec(20,30,30))
    addHoloParented(2,71,"models/props_combine/headcrabcannister01a.mdl",vec(0,-15,0),ang(0,-90,0))
     holoScaleUnits(71,vec(20,30,30))

    addHoloParented(5,72,"models/props_combine/headcrabcannister01a.mdl",vec(0,15,0),ang(0,90,0))
     holoScaleUnits(72,vec(20,30,30))
    addHoloParented(5,73,"models/props_combine/headcrabcannister01a.mdl",vec(0,-15,0),ang(0,-90,0))
     holoScaleUnits(73,vec(20,30,30))

# details part 3

     addHoloParented(Body,74,"models/gibs/helicopter_brokenpiece_04_cockpit.mdl",vec(25,0,0),ang())
        holoScale(74,vec(0.7,1,0.7))
    
     addHoloParented(Body,75,"models/props_silo/transformer.mdl",vec(-30,0,0),ang(0,180,0))
     addHoloParented(Body,76,"models/props_mining/brace_mining01.mdl",vec(-30,0,0),ang(0,180,0))
        holoScale(75,vec(0.4))
        holoScale(76,vec(3,0.4,0.4))
     
     addHoloParented(Body,77,"models/engines/emotor-standalone-big.mdl",vec(0,30,0),ang(0,-90,0))
     addHoloParented(Body,78,"models/engines/emotor-standalone-big.mdl",vec(0,-30,0),ang(0,90,0))
     addHoloParented(Body,79,"models/sprops/misc/tubes/size_3/q_tube_36x48.mdl",vec(6,0,6),ang(0,180,0))
       holoMaterial(79,"models/Combine_Turrets/combine_cannon")
        

    #models/props_silo/fuel_cask.mdl

    

   # cameraToggle(1,1)
    Body:propFreeze(0)
IsTP = 1

    
} #end of first()

if(dmgClk()){
    if(lastDamageVictim()==Body){
    # hint("damage detected:"+lastDamage():getDamage(),1)
     Body:damageF(lastDamage())  
    }  
}
event tick(){
    if(changed(R)&&R){
        IsTP=1-IsTP
        IsFP=1-IsFP
    }
    legmovement()
    if(Body:isValid()){
    if(HEALTH>0){
    Body:doGyro(5705,55)
    turnToMovementDir()
        
    LeftLeg[1,entity]:doServoThink(1)
    LeftLeg[2,entity]:doServoThink(2)
    RightLeg[1,entity]:doServoThink(3)
    RightLeg[2,entity]:doServoThink(4)

    if(Seat:driver():isValid()){
        movementMap()
    }
    LeftLeg:doHydrThink(22500-(11000*Shift),5,LEGL,Body)
    RightLeg:doHydrThink(22500-(11000*Shift),5,LEGL,Body)
    }
    
    
    
    local IsFOOTG1=rangerOffset(LeftLeg[3,entity]:pos(),LeftLeg[3,entity]:pos()-vec(0,0,20)):hit()
    local IsFOOTG2=rangerOffset(RightLeg[3,entity]:pos(),RightLeg[3,entity]:pos()-vec(0,0,20)):hit()
    
    if(changed(IsFOOTG1&&IsFOOTG1)){
            LeftLeg[3,entity]:emitStepSound()
    }
    if(changed(IsFOOTG2&&IsFOOTG2)){
            RightLeg[3,entity]:emitStepSound()
    }


    
    
    TP = Position*0.9 + 0.1*(Body:boxCenterW()+(vec(-200,0,90):rotate(Body:angles()*ang(0.5,1,0.5))))
    FP = Body:boxCenterW()+vec(10,0,20):rotate(Body:angles())
    
    TPA = Body:angles()*ang(0.5,1,0.5)-ang(-15,0,0)+Seat:driver():eyeAngles()*ang(1,0,0)
    FPA = Body:angles()+Seat:driver():eyeAngles()*ang(0.5,0,0)
    
    Position = IsFP*FP+IsTP*TP
    Angle = IsFP*FPA+IsTP*TPA
    #cameraAng(1,CamAng)
    #cameraPos(1,CamPos)
     Body:hpBarTick(HEALTH,HP_ARM[1,number],HPN,50)  
     Body:armorBarTick(ARMOR,HP_ARM[2,number],ARN,50) 


   }

    if(changed(HEALTH)&&max(0,HEALTH)==0){
        timer("Respawn",10000)
    }
}
event removed(N:number){
 Seat:propBreak()      
}
